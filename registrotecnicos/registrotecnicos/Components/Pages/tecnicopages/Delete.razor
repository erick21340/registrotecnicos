@page "/DeleteTecnico/{tecnicosId:int}"

@inject TecnicoServices tecnicosServices
@rendermode InteractiveServer
@inject NavigationManager navigation

<PageTitle>Eliminar técnico</PageTitle>
<EditForm Model="tecnicoId" OnValidSubmit="Eliminar">
   
    <div class="container">
        <div class="card shadow-lg">

            <div class="card-header">
                <h3><strong>Eliminar técnico</strong></h3>
            </div>

            <div class="card-body">
                <h3><strong>¿Estás seguro de que quieres eliminar este técnico?</strong></h3>

                <div class="mb-1">
                    <p class="mb-0">TecnicoId: @tecnicoId.tipoid</p>
                </div>
                <div class="mb-1">
                    <p class="mb-0">Tecnico: @tecnicoId.TecnicosTipos</p>
                </div>
                
            </div>

            <div class="card-footer">
                <button type="button" class="btn btn-outline-dark" @onclick="Volver">Volver</button>
                <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int tecnicosId { get; set; }
    public Tecnicos tecnicoId { get; set; } = new Tecnicos();
    public string? mensaje { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (tecnicosId > 0)
            tecnicoId = (await tecnicosServices.Buscar(tecnicosId))!;
    }

    public async Task Eliminar()
    {
        var eliminar = await tecnicosServices.Eliminar(tecnicosId);
        if (eliminar)
        {
            mensaje = "El técnico se eliminó con éxito";
            await Task.Delay(500);
            Volver();
        }
        else
        {
            mensaje = "El técnico no se ha podido eliminar correctamente";
        }
    }

    public void Volver()
    {
        navigation.NavigateTo("/Tecnico");
    }
}
