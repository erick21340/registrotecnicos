@page "/Tecnico"
@inject TecnicoServices TecnicosServices
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Lista de Técnicos</PageTitle>

<div class="card">
    <div class="card-header bg-primary text-white text-center">
        <h3>Técnicos</h3>
    </div>

    <div class="card-body">
        <div class="row mb-4">
            <div class="col d-flex justify-content-end align-items-end">
                <a href="/CreateTecnicos" class="btn btn-success"><i class="fas fa-plus"></i> Crear</a>
            </div>
        </div>

        <div class="row mb-4">
            <div class="col">
                <input class="form-control" @bind="filtroTipo" placeholder="Filtrar por tipo de técnico" />
                <button class="btn btn-primary mt-2" @onclick="FiltrarTecnicos">Filtrar</button>
                <button class="btn btn-secondary mt-2 ml-2" @onclick="ResetearFiltro">Resetear</button>
            </div>
        </div>

        <table class="table table-bordered text-center">
            <thead class="bg-primary text-white">
                <tr>
                    <th>TipoId</th>
                    <th>Tipos Técnico</th>
                    <th>Detalle</th>
                    <th>Editar</th>
                    <th>Eliminar</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var tecnico in tecnicosList)
                {
                    <tr>
                        <td>@tecnico.tipoid</td>
                        <td>@tecnico.TecnicosTipos</td>
                        <td>
                            <a href="/DetalleTecnico/@tecnico.TecnicoId" class="btn btn-sm btn-info"><i class="fas fa-info-circle"></i> Detalle</a>
                        </td>
                        <td>
                            <a href="/EditTecnico/@tecnico.TecnicoId" class="btn btn-sm btn-primary"><i class="fas fa-edit"></i> Editar</a>
                        </td>
                        <td>
                            <a href="/DeleteTecnico/@tecnico.TecnicoId" class="btn btn-sm alert-danger "><i class="fas fa-trash"></i> Eliminar</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    public List<Tecnicos> tecnicosList = new List<Tecnicos>();
    public string filtroTipo { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CargarTecnicos();
    }

    private async Task CargarTecnicos()
    {
        tecnicosList = await TecnicosServices.Listar(t => true);
    }

    private async Task EliminarTecnico(int tecnicoId)
    {
        var confirmar = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Estás seguro de eliminar el técnico con ID {tecnicoId}?");
        if (confirmar)
        {
            var eliminado = await TecnicosServices.Eliminar(tecnicoId);
            if (eliminado)
            {
                await CargarTecnicos();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "No se pudo eliminar el técnico.");
            }
        }
    }

    private async Task FiltrarTecnicos()
    {
        if (string.IsNullOrWhiteSpace(filtroTipo))
        {
            tecnicosList = await TecnicosServices.Listar(t => true);
        }
        else
        {
            tecnicosList = await TecnicosServices.Listar(t => t.TecnicosTipos.Contains(filtroTipo));
        }
    }

    private async Task ResetearFiltro()
    {
        filtroTipo = string.Empty;
        await CargarTecnicos();
    }
}
